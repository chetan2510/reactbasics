{"ast":null,"code":"import _classCallCheck from\"/Users/brian/Desktop/ReactWebApp/reactbasics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/brian/Desktop/ReactWebApp/reactbasics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/brian/Desktop/ReactWebApp/reactbasics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/brian/Desktop/ReactWebApp/reactbasics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";export var TodoItems=/*#__PURE__*/function(_Component){_inherits(TodoItems,_Component);var _super=_createSuper(TodoItems);function TodoItems(){var _this;_classCallCheck(this,TodoItems);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.getStyle=function(){return{background:'#f4f4f4f4',padding:'10px',borderBottom:'1px #ccc dotted',textDecoration:_this.props.todo.completed?'line-through':'none'};};_this.getButttonStyle=function(){return{background:'#ff0000',color:'#fff',border:'none',padding:'5px 10px',borderRadius:'50%',cursor:'pointer',float:'right'};};return _this;}_createClass(TodoItems,[{key:\"render\",// buttonClicked = () => {\n//     alert(\"hello\");\n// }\n// we can add the things like this when passinf from the functions\n// using checkbox, e is the argument we are passing from the function\n// markComplete = (e) => {\n//\n// }\nvalue:function render(){// this is the way how we can pull the varibles out form the props\nvar _this$props$todo=this.props.todo,id=_this$props$todo.id,title=_this$props$todo.title;// printing the specific key-value pair\nreturn/*#__PURE__*/ (// inline styling\nReact.createElement(\"div\",{style:this.getStyle()},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",onChange:this.props.markComplete.bind(this,id)}),/*#__PURE__*/React.createElement(\"button\",{onClick:this.props.deleteButtton.bind(this,id),style:this.getButttonStyle()},\"X\"),/*#__PURE__*/React.createElement(\"p\",null,\" \",this.props.todo.title,\" \")));}}]);return TodoItems;}(Component);// Validates that the object type is that only what we are expecting\n// can add styling like this also\nvar itemStyle={backgroundColor:'#f4f4f4'};export default TodoItems;","map":{"version":3,"sources":["/Users/brian/Desktop/ReactWebApp/reactbasics/src/components/TodoItems.js"],"names":["React","Component","TodoItems","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","getButttonStyle","color","border","borderRadius","cursor","float","id","title","markComplete","bind","deleteButtton","itemStyle","backgroundColor"],"mappings":"4nBAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CAGA,UAAaC,CAAAA,SAAb,uUAIIC,QAJJ,CAIe,UAAM,CACV,MAAO,CACHC,UAAU,CAAE,WADT,CAEHC,OAAO,CAAE,MAFN,CAGHC,YAAY,CAAE,iBAHX,CAIHC,cAAc,CAAG,MAAKC,KAAL,CAAWC,IAAX,CAAgBC,SAAhB,CAA4B,cAA5B,CAA6C,MAJ3D,CAAP,CAMN,CAXL,OAaIC,eAbJ,CAasB,UAAM,CACpB,MAAO,CACHP,UAAU,CAAE,SADT,CAEHQ,KAAK,CAAE,MAFJ,CAGHC,MAAM,CAAE,MAHL,CAIHR,OAAO,CAAE,UAJN,CAKHS,YAAY,CAAE,KALX,CAMHC,MAAM,CAAE,SANL,CAOHC,KAAK,CAAE,OAPJ,CAAP,CAUH,CAxBL,qDA0BI;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAlCJ,uBAmCa,CAEL;AAFK,qBAGkB,KAAKR,KAAL,CAAWC,IAH7B,CAGGQ,EAHH,kBAGGA,EAHH,CAGOC,KAHP,kBAGOA,KAHP,CAIL;AACA,oBAEI;AACA,2BAAK,KAAK,CAAE,KAAKf,QAAL,EAAZ,eAQA,6BAAO,IAAI,CAAG,UAAd,CAAyB,QAAQ,CAAE,KAAKK,KAAL,CAAWW,YAAX,CAAwBC,IAAxB,CAA6B,IAA7B,CAAmCH,EAAnC,CAAnC,EARA,cASI,8BAAQ,OAAO,CAAE,KAAKT,KAAL,CAAWa,aAAX,CAAyBD,IAAzB,CAA8B,IAA9B,CAAoCH,EAApC,CAAjB,CAA0D,KAAK,CAAE,KAAKN,eAAL,EAAjE,MATJ,cAUA,iCAAK,KAAKH,KAAL,CAAWC,IAAX,CAAgBS,KAArB,KAVA,CAHJ,EAgBH,CAxDL,uBAA+BjB,SAA/B,EA4DA;AAKA;AACA,GAAMqB,CAAAA,SAAS,CAAG,CACdC,eAAe,CAAE,SADH,CAAlB,CAIA,cAAerB,CAAAA,SAAf","sourcesContent":["import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport class TodoItems extends Component {\n\n    // we can do the styling like this for the specific values coming as props\n    // using this syntax so we don't have to use bind\n    getStyle = () => {\n           return {\n               background: '#f4f4f4f4',\n               padding: '10px',\n               borderBottom: '1px #ccc dotted',\n               textDecoration : this.props.todo.completed ? 'line-through' : 'none'\n           }\n    }\n\n    getButttonStyle = () => {\n        return {\n            background: '#ff0000',\n            color: '#fff',\n            border: 'none',\n            padding: '5px 10px',\n            borderRadius: '50%',\n            cursor: 'pointer',\n            float: 'right'\n\n        }\n    }\n\n    // buttonClicked = () => {\n    //     alert(\"hello\");\n    // }\n\n    // we can add the things like this when passinf from the functions\n    // using checkbox, e is the argument we are passing from the function\n    // markComplete = (e) => {\n    //\n    // }\n    render() {\n\n        // this is the way how we can pull the varibles out form the props\n        const { id, title } =  this.props.todo;\n        // printing the specific key-value pair\n        return (\n\n            // inline styling\n            <div style={this.getStyle()}>\n\n            {/*this says that proping out the mark complete to the caller tag\n               the markComplete tag should be present in the caller tag see Todos.js\n             */}\n\n            {/* like this we can bind any values to the prop which is calling back, here we have given an id to it\n                this binding will stay forever with this method*/}\n            <input type = \"checkbox\" onChange={this.props.markComplete.bind(this, id)}/>\n                <button onClick={this.props.deleteButtton.bind(this, id)} style={this.getButttonStyle()}>X</button>\n            <p> {this.props.todo.title} </p>\n            </div>\n        )\n    }\n}\n\n\n// Validates that the object type is that only what we are expecting\nTodoItems.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\n// can add styling like this also\nconst itemStyle = {\n    backgroundColor: '#f4f4f4'\n}\n\nexport default TodoItems"]},"metadata":{},"sourceType":"module"}